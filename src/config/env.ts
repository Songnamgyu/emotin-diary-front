/* eslint-disable @typescript-eslint/no-explicit-any */
// src/config/env.ts
// ÌôòÍ≤Ω ÌÉÄÏûÖ Ï†ïÏùò
type NodeEnv = "local" | "development" | "staging" | "production";
type LogLevel = "debug" | "info" | "warn" | "error";

// ÌôòÍ≤Ω Î≥ÄÏàò Í≤ÄÏ¶ù Î∞è Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
const getNodeEnv = (): NodeEnv => {
    const env = import.meta.env.VITE_NODE_ENV;
    if (
        env === "local" ||
        env === "development" ||
        env === "staging" ||
        env === "production"
    ) {
        return env;
    }
    return "development"; // Í∏∞Î≥∏Í∞í
};

export const ENV = {
    NODE_ENV: getNodeEnv(),
    API_BASE_URL:
        import.meta.env.VITE_API_BASE_URL || "http://localhost:8080/api",
    APP_ENV: import.meta.env.VITE_APP_ENV || "development",
    APP_NAME: import.meta.env.VITE_APP_NAME || "Í∞êÏ†ï ÏùºÍ∏∞",
    APP_VERSION: import.meta.env.VITE_APP_VERSION || "1.0.0",
    DEBUG: import.meta.env.VITE_DEBUG === "true",
} as const;

export const isDevelopment =
    ENV.NODE_ENV === "development" || ENV.NODE_ENV === "local";
export const isProduction = ENV.NODE_ENV === "production";
export const isStaging = ENV.NODE_ENV === "staging";
export const isLocal = ENV.NODE_ENV === "local";

// ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï (ÌÉÄÏûÖ ÏïàÏ†Ñ)
export const CONFIG = {
    local: {
        apiTimeout: 30000,
        enableDevTools: true,
        logLevel: "debug" as LogLevel,
    },
    development: {
        apiTimeout: 15000,
        enableDevTools: true,
        logLevel: "info" as LogLevel,
    },
    staging: {
        apiTimeout: 10000,
        enableDevTools: false,
        logLevel: "warn" as LogLevel,
    },
    production: {
        apiTimeout: 10000,
        enableDevTools: false,
        logLevel: "error" as LogLevel,
    },
} as const;

// ÌÉÄÏûÖ ÏïàÏ†ÑÌïú ÌòÑÏû¨ ÌôòÍ≤Ω ÏÑ§Ï†ï
export const currentConfig = CONFIG[ENV.NODE_ENV];

// Î°úÍπÖ Ïú†Ìã∏Î¶¨Ìã∞
export const logger = {
    debug: (...args: any[]) => {
        if (ENV.DEBUG && currentConfig.logLevel === "debug") {
            console.log("üêõ [DEBUG]", ...args);
        }
    },
    info: (...args: any[]) => {
        if (["debug", "info"].includes(currentConfig.logLevel)) {
            console.info("‚ÑπÔ∏è [INFO]", ...args);
        }
    },
    warn: (...args: any[]) => {
        if (["debug", "info", "warn"].includes(currentConfig.logLevel)) {
            console.warn("‚ö†Ô∏è [WARN]", ...args);
        }
    },
    error: (...args: any[]) => {
        console.error("‚ùå [ERROR]", ...args);
    },
};

// ÌôòÍ≤Ω Ï†ïÎ≥¥ Ï∂úÎ†•
if (ENV.DEBUG) {
    console.group("üåç Environment Configuration");
    console.log("Node Environment:", ENV.NODE_ENV);
    console.log("App Environment:", ENV.APP_ENV);
    console.log("API Base URL:", ENV.API_BASE_URL);
    console.log("Debug Mode:", ENV.DEBUG);
    console.log("Configuration:", currentConfig);
    console.groupEnd();
}
